% Part I: SIR Model using 4th-order Runge-Kutta Method
h = 1;  % Fine step size
S0 = 990; I0 = 10; R0 = 0;  % Initial conditions
T = 100;  % Total simulation time
time_vec = 1:h:T;  % Time vector for h=1
steps = length(time_vec);
beta_influenza = 0.3; gamma_influenza = 0.1;  % Influenza parameters

% Run the fine-grained simulation (h=1)
[S_fine, I_fine, R_fine] = runge_kutta(S0, I0, R0, beta_influenza, gamma_influenza, h, steps);

% Part II: Interpolation and Error Analysis
h_coarse = 2;  % Coarser step size
time_vec_coarse = 0:h_coarse:T;  % Time vector for h=2
steps_coarse = length(time_vec_coarse);

% Run the coarse simulation (h=2)
[S_coarse, I_coarse, R_coarse] = runge_kutta(S0, I0, R0, beta_influenza, gamma_influenza, h_coarse, steps_coarse);
S_temp=S_coarse;
S_coarse=zeros(1,steps);
for k=2:2:steps
    S_coarse(k)=S_temp(k/2);
end
S_linear=S_coarse;
for k=1:2:steps
   if k==1
       S_linear(k)=S0;
   else
       S_linear(k)=S_linear(k-1)+((S_linear(k+1)-S_linear(k-1))/(time_vec(k+1)-time_vec(k-1)))*(time_vec(k)-time_vec(k-1));
   end
end
figure
plot(time_vec,S_linear,'r',time_vec,S_fine,'k')

% Runge-Kutta
function [S, I, R] = runge_kutta(S0, I0, R0, beta, gamma, h, steps)
    S = zeros(steps, 1);
    I = zeros(steps, 1);
    R = zeros(steps, 1);

    % initial conditions
    S(1) = S0;
    I(1) = I0;
    R(1) = R0;

    % Total pop
    N = S0 + I0 + R0;

    for t = 1:steps-1
        % Compute RK4 steps
        % k1
        dS1 = -beta * S(t) * I(t) / N;
        dI1 = beta * S(t) * I(t) / N - gamma * I(t);
        dR1 = gamma * I(t);

        % k2
        dS2 = -beta * (S(t) + h*dS1/2) * (I(t) + h*dI1/2) / N;
        dI2 = beta * (S(t) + h*dS1/2) * (I(t) + h*dI1/2) / N - gamma * (I(t) + h*dI1/2);
        dR2 = gamma * (I(t) + h*dI1/2);

        % k3
        dS3 = -beta * (S(t) + h*dS2/2) * (I(t) + h*dI2/2) / N;
        dI3 = beta * (S(t) + h*dS2/2) * (I(t) + h*dI2/2) / N - gamma * (I(t) + h*dI2/2);
        dR3 = gamma * (I(t) + h*dI2/2);

        % k4
        dS4 = -beta * (S(t) + h*dS3) * (I(t) + h*dI3) / N;
        dI4 = beta * (S(t) + h*dS3) * (I(t) + h*dI3) / N - gamma * (I(t) + h*dI3);
        dR4 = gamma * (I(t) + h*dI3);

        % Update values
        % Update SIR
        S(t+1) = S(t) + h * (dS1 + 2*dS2 + 2*dS3 + dS4) / 6;
        I(t+1) = I(t) + h * (dI1 + 2*dI2 + 2*dI3 + dI4) / 6;
        R(t+1) = R(t) + h * (dR1 + 2*dR2 + 2*dR3 + dR4) / 6;
    end
end
