% Part I: SIR Model using 4th-order Runge-Kutta Method
h = 1;  % Fine step size
S0 = 990; I0 = 10; R0 = 0;  % Initial conditions
T = 100;  % Total simulation time
time_vec = 0:h:T;  % Time vector for h=1
steps = length(time_vec);
beta_influenza = 0.3; gamma_influenza = 0.1;  % Influenza parameters

% Run the fine-grained simulation (h=1)
[S_fine, I_fine, R_fine] = runge_kutta(S0, I0, R0, beta_influenza, gamma_influenza, h, steps);

% Part II: Interpolation and Error Analysis
h_coarse = 2;  % Coarser step size
time_vec_coarse = 0:h_coarse:T;  % Time vector for h=2
steps_coarse = length(time_vec_coarse);

% Run the coarse simulation (h=2)
[S_coarse, I_coarse, R_coarse] = runge_kutta(S0, I0, R0, beta_influenza, gamma_influenza, h_coarse, steps_coarse);

% Perform Newton Interpolation
time_odd = time_vec(2:2:end);  % Odd days (not in coarse data)

S_linear = zeros(size(time_odd));
I_linear = zeros(size(time_odd));
R_linear = zeros(size(time_odd));

S_newton = zeros(size(time_odd));
I_newton = zeros(size(time_odd));
R_newton = zeros(size(time_odd));

for i = 1:length(time_odd)
    % Use two closest points for linear (Newton) interpolation
    [~, idx] = min(abs(time_vec_coarse - time_odd(i)));
    idx_range_linear = max(1, idx):min(idx+1, steps_coarse);
    S_linear(i) = newton_interpolation(time_odd(i), time_vec_coarse(idx_range_linear), S_coarse(idx_range_linear));
    I_linear(i) = newton_interpolation(time_odd(i), time_vec_coarse(idx_range_linear), I_coarse(idx_range_linear));
    R_linear(i) = newton_interpolation(time_odd(i), time_vec_coarse(idx_range_linear), R_coarse(idx_range_linear));

    % Use three closest points for quadratic (Newton) interpolation
    idx_range_newton = max(1, idx-1):min(idx+1, steps_coarse);
    S_newton(i) = newton_interpolation(time_odd(i), time_vec_coarse(idx_range_newton), S_coarse(idx_range_newton));
    I_newton(i) = newton_interpolation(time_odd(i), time_vec_coarse(idx_range_newton), I_coarse(idx_range_newton));
    R_newton(i) = newton_interpolation(time_odd(i), time_vec_coarse(idx_range_newton), R_coarse(idx_range_newton));
end

% L2 Error Calculation
S_fine_odd = S_fine(2:2:end);  % Reference data for odd days
I_fine_odd = I_fine(2:2:end);
R_fine_odd = R_fine(2:2:end);

% Linear interpolation errors
L2_S_linear = sqrt(mean((S_linear - S_fine_odd).^2));
L2_I_linear = sqrt(mean((I_linear - I_fine_odd).^2));
L2_R_linear = sqrt(mean((R_linear - R_fine_odd).^2));

% Newton interpolation errors
L2_S_newton = sqrt(mean((S_newton - S_fine_odd).^2));
L2_I_newton = sqrt(mean((I_newton - I_fine_odd).^2));
L2_R_newton = sqrt(mean((R_newton - R_fine_odd).^2));

% Display Error Table
disp('Interpolation Error Table');
disp(table(["Linear"; "Newton"], [L2_S_linear; L2_S_newton], [L2_I_linear; L2_I_newton], [L2_R_linear; L2_R_newton], ...
    'VariableNames', {'Method', 'L2_Error_S', 'L2_Error_I', 'L2_Error_R'}));

% Plot Comparison of Interpolation and Fine-Grained Data
figure;
subplot(3, 1, 1);
plot(time_vec, S_fine, 'b-', time_odd, S_linear, 'r*', time_odd, S_newton, 'go');
title('S(t) Comparison');
xlabel('Time'); ylabel('S(t)');
legend('Fine-Grained', 'Linear Interpolation', 'Newton Interpolation');
grid on;

subplot(3, 1, 2);
plot(time_vec, I_fine, 'b-', time_odd, I_linear, 'r*', time_odd, I_newton, 'go');
title('I(t) Comparison');
xlabel('Time'); ylabel('I(t)');
legend('Fine-Grained', 'Linear Interpolation', 'Newton Interpolation');
grid on;

subplot(3, 1, 3);
plot(time_vec, R_fine, 'b-', time_odd, R_linear, 'r*', time_odd, R_newton, 'go');
title('R(t) Comparison');
xlabel('Time'); ylabel('R(t)');
legend('Fine-Grained', 'Linear Interpolation', 'Newton Interpolation');
grid on;

% Newton Interpolation Function

function y_interp = newton_interpolation(x_interp, x_data, y_data)
    n = length(x_data);
    diff_table = zeros(n, n);
    diff_table(:, 1) = y_data(:);  % Fill the first column with y_data

    % Compute divided differences
    for j = 2:n
        for i = 1:n-j+1
            diff_table(i, j) = (diff_table(i+1, j-1) - diff_table(i, j-1)) / (x_data(i+j-1) - x_data(i));
        end
    end

    % Interpolation
    y_interp = diff_table(1, 1);  % Start with the first term
    prod_term = 1;
    for k = 2:n
        prod_term = prod_term * (x_interp - x_data(k-1));
        y_interp = y_interp + prod_term * diff_table(1, k);
    end
end

% Runge-Kutta
function [S, I, R] = runge_kutta(S0, I0, R0, beta, gamma, h, steps)
    S = zeros(steps, 1);
    I = zeros(steps, 1);
    R = zeros(steps, 1);

    % initial conditions
    S(1) = S0;
    I(1) = I0;
    R(1) = R0;

    % Total pop
    N = S0 + I0 + R0;

    for t = 1:steps-1
        % k1
        dS1 = -beta * S(t) * I(t) / N;
        dI1 = beta * S(t) * I(t) / N - gamma * I(t);
        dR1 = gamma * I(t);

        % k2
        dS2 = -beta * (S(t) + h*dS1/2) * (I(t) + h*dI1/2) / N;
        dI2 = beta * (S(t) + h*dS1/2) * (I(t) + h*dI1/2) / N - gamma * (I(t) + h*dI1/2);
        dR2 = gamma * (I(t) + h*dI1/2);

        % k3
        dS3 = -beta * (S(t) + h*dS2/2) * (I(t) + h*dI2/2) / N;
        dI3 = beta * (S(t) + h*dS2/2) * (I(t) + h*dI2/2) / N - gamma * (I(t) + h*dI2/2);
        dR3 = gamma * (I(t) + h*dI2/2);

        % k4
        dS4 = -beta * (S(t) + h*dS3) * (I(t) + h*dI3) / N;
        dI4 = beta * (S(t) + h*dS3) * (I(t) + h*dI3) / N - gamma * (I(t) + h*dI3);
        dR4 = gamma * (I(t) + h*dI3);

        % Update SIR
        S(t+1) = S(t) + h * (dS1 + 2*dS2 + 2*dS3 + dS4) / 6;
        I(t+1) = I(t) + h * (dI1 + 2*dI2 + 2*dI3 + dI4) / 6;
        R(t+1) = R(t) + h * (dR1 + 2*dR2 + 2*dR3 + dR4) / 6;
    end
end
