%{
Comments:
The results show that quadratic interpolation is more accurate than linear interpolation, 
This is evidenced by the smaller errors and tighter fit of the exact data. 
These numbers are shown in the error table. 

When zooming in on the graphs, the differences become clear, 
linear interpolation shows more noticeable deviations, 
while quadratic interpolation closely follows the exact model.

%}
%Beginning of the code

% Parameters for SIR model
S0 = 990; I0 = 10; R0 = 0; T = 100;
N = S0 + I0 + R0; % Total population
beta = 0.3; gamma = 0.1;

% Fine timestep simulation (h = 1)
h_fine = 1;
steps_fine = T / h_fine + 1;
time_vec_fine = 0:h_fine:T;
[S_fine, I_fine, R_fine] = runge_kutta(S0, I0, R0, beta, gamma, h_fine, steps_fine);

% Normalize by population size
S_fine = S_fine / N;
I_fine = I_fine / N;
R_fine = R_fine / N;

% Coarse timestep simulation (h = 2)
h_coarse = 2;
steps_coarse = T / h_coarse + 1;
time_vec_coarse = 0:h_coarse:T;
[S_coarse, I_coarse, R_coarse] = runge_kutta(S0, I0, R0, beta, gamma, h_coarse, steps_coarse);

% Normalize coarse results
S_coarse = S_coarse / N;
I_coarse = I_coarse / N;
R_coarse = R_coarse / N;

% Odd time points for interpolation
odd_times = 1:2:T-1;

% Linear interpolation using dynamically selected bracketing points
linear_S = arrayfun(@(t) linear_interp_dynamic(time_vec_coarse, S_coarse, t), odd_times);
linear_I = arrayfun(@(t) linear_interp_dynamic(time_vec_coarse, I_coarse, t), odd_times);
linear_R = arrayfun(@(t) linear_interp_dynamic(time_vec_coarse, R_coarse, t), odd_times);

% Quadratic interpolation using dynamically selected points
quadratic_S = arrayfun(@(t) quadratic_interp_dynamic(time_vec_coarse, S_coarse, t), odd_times);
quadratic_I = arrayfun(@(t) quadratic_interp_dynamic(time_vec_coarse, I_coarse, t), odd_times);
quadratic_R = arrayfun(@(t) quadratic_interp_dynamic(time_vec_coarse, R_coarse, t), odd_times);


% Extract exact values at odd time points
exact_S_odd = S_fine(round(odd_times / h_fine) + 1);
exact_I_odd = I_fine(round(odd_times / h_fine) + 1);
exact_R_odd = R_fine(round(odd_times / h_fine) + 1);

% Compute scalar L2 errors using the provided formula
N_int = length(odd_times); % Total number of interpolated points

% Linear Interpolation Errors
linear_S_error = sqrt(sum((linear_S(:) - exact_S_odd(:)).^2) / N_int);
linear_I_error = sqrt(sum((linear_I(:) - exact_I_odd(:)).^2) / N_int);
linear_R_error = sqrt(sum((linear_R(:) - exact_R_odd(:)).^2) / N_int);

% Quadratic Interpolation Errors
quadratic_S_error = sqrt(sum((quadratic_S(:) - exact_S_odd(:)).^2) / N_int);
quadratic_I_error = sqrt(sum((quadratic_I(:) - exact_I_odd(:)).^2) / N_int);
quadratic_R_error = sqrt(sum((quadratic_R(:) - exact_R_odd(:)).^2) / N_int);

% Create and display a table of scalar L2 errors
error_table = table(["Linear"; "Quadratic"], ...
                    [linear_S_error; quadratic_S_error], ...
                    [linear_I_error; quadratic_I_error], ...
                    [linear_R_error; quadratic_R_error], ...
                    'VariableNames', {'Method', 'S_Error', 'I_Error', 'R_Error'});

disp('L2 Error Table:');
disp(error_table);

% Plot results on Graphs
figure;
subplot(3, 1, 1);
plot(time_vec_fine, S_fine, 'k-', 'LineWidth', 1.5, 'DisplayName', 'Exact');
hold on;
plot(odd_times, linear_S, 'r-', 'LineWidth', 1.5, 'DisplayName', 'Linear');
plot(odd_times, quadratic_S, 'g-', 'LineWidth', 1.5, 'DisplayName', 'Quadratic');
title('S(t)'); legend; grid on;

subplot(3, 1, 2);
plot(time_vec_fine, I_fine, 'k-', 'LineWidth', 1.5, 'DisplayName', 'Exact');
hold on;
plot(odd_times, linear_I, 'r-', 'LineWidth', 1.5, 'DisplayName', 'Linear');
plot(odd_times, quadratic_I, 'g-', 'LineWidth', 1.5, 'DisplayName', 'Quadratic');
title('I(t)'); legend; grid on;

subplot(3, 1, 3);
plot(time_vec_fine, R_fine, 'k-', 'LineWidth', 1.5, 'DisplayName', 'Exact');
hold on;
plot(odd_times, linear_R, 'r-', 'LineWidth', 1.5, 'DisplayName', 'Linear');
plot(odd_times, quadratic_R, 'g-', 'LineWidth', 1.5, 'DisplayName', 'Quadratic');
title('R(t)'); legend; grid on;

% Supporting Functions




function [S, I, R] = runge_kutta(S0, I0, R0, beta, gamma, h, steps)
    % Runge-Kutta method for solving the SIR model
    S = zeros(steps, 1);
    I = zeros(steps, 1);
    R = zeros(steps, 1);
    S(1) = S0; I(1) = I0; R(1) = R0;
    N = S0 + I0 + R0;

    for t = 1:steps-1
        dS1 = -beta * S(t) * I(t) / N;
        dI1 = beta * S(t) * I(t) / N - gamma * I(t);
        dR1 = gamma * I(t);

        dS2 = -beta * (S(t) + h * dS1 / 2) * (I(t) + h * dI1 / 2) / N;
        dI2 = beta * (S(t) + h * dS1 / 2) * (I(t) + h * dI1 / 2) / N - gamma * (I(t) + h * dI1 / 2);
        dR2 = gamma * (I(t) + h * dI1 / 2);

        dS3 = -beta * (S(t) + h * dS2 / 2) * (I(t) + h * dI2 / 2) / N;
        dI3 = beta * (S(t) + h * dS2 / 2) * (I(t) + h * dI2 / 2) / N - gamma * (I(t) + h * dI2 / 2);
        dR3 = gamma * (I(t) + h * dI2 / 2);

        dS4 = -beta * (S(t) + h * dS3) * (I(t) + h * dI3) / N;
        dI4 = beta * (S(t) + h * dS3) * (I(t) + h * dI3) / N - gamma * (I(t) + h * dI3);
        dR4 = gamma * (I(t) + h * dI3);

        S(t+1) = S(t) + h * (dS1 + 2*dS2 + 2*dS3 + dS4) / 6;
        I(t+1) = I(t) + h * (dI1 + 2*dI2 + 2*dI3 + dI4) / 6;
        R(t+1) = R(t) + h * (dR1 + 2*dR2 + 2*dR3 + dR4) / 6;
    end
end

function result = manual_arrayfun(func, array)
    % Manually implements arrayfun
    result = zeros(size(array));
    for i = 1:length(array)
        result(i) = func(array(i));
    end
end

function result = manual_sum(array)
    % Manually implements sum
    result = 0;
    for i = 1:length(array)
        result = result + array(i);
    end
end

function y_interp = linear_interp_dynamic(x_vals, y_vals, x)
    % Manual linear interpolation
    idx = 1;
    for i = 1:length(x_vals)
        if x_vals(i) <= x
            idx = i;
        else
            break;
        end
    end
    if idx == length(x_vals)
        idx = idx - 1;
    end
    x1 = x_vals(idx);
    x2 = x_vals(idx + 1);
    y1 = y_vals(idx);
    y2 = y_vals(idx + 1);
    y_interp = y1 + (y2 - y1) * (x - x1) / (x2 - x1);
end

function y_interp = quadratic_interp_dynamic(x_vals, y_vals, x)
    % Manual quadratic interpolation
    % Dynamically select the closest three points
    closest_dist = abs(x_vals - x);
    idx = 1;
    min_dist = closest_dist(1);
    for i = 2:length(closest_dist)
        if closest_dist(i) < min_dist
            min_dist = closest_dist(i);
            idx = i;
        end
    end
    
    % Select three nearest points
    if idx == 1
        x_nearest = x_vals(1:3).';
        y_nearest = y_vals(1:3).';
    elseif idx == length(x_vals)
        x_nearest = x_vals(end-2:end).';
        y_nearest = y_vals(end-2:end).';
    else
        x_nearest = x_vals(idx-1:idx+1).';
        y_nearest = y_vals(idx-1:idx+1).';
    end

    % Ensure column vectors for consistency
    x_nearest = x_nearest(:);
    y_nearest = y_nearest(:);

    % Form the quadratic system matrix A
    A = [x_nearest.^2, x_nearest, ones(length(x_nearest), 1)];

    % Solve for the coefficients using manual Gaussian elimination
    coeffs = manual_gauss_elimination(A, y_nearest);

    % Evaluate the polynomial at x
    y_interp = coeffs(1) * x^2 + coeffs(2) * x + coeffs(3);
end


function coeffs = manual_gauss_elimination(A, b)
    % Manual Gaussian elimination for solving Ax = b
    n = size(A, 1);
    for i = 1:n
        % Pivoting
        [~, max_row] = max(abs(A(i:n, i)));
        max_row = max_row + i - 1;
        if max_row ~= i
            A([i, max_row], :) = A([max_row, i], :);
            b([i, max_row]) = b([max_row, i]);
        end
        % Elimination
        for j = i+1:n
            factor = A(j, i) / A(i, i);
            A(j, i:end) = A(j, i:end) - factor * A(i, i:end);
            b(j) = b(j) - factor * b(i);
        end
    end
    % Back substitution
    coeffs = zeros(n, 1);
    for i = n:-1:1
        coeffs(i) = (b(i) - A(i, i+1:end) * coeffs(i+1:end)) / A(i, i);
    end
end
